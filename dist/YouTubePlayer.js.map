{"version":3,"sources":["YouTubePlayer.js"],"names":[],"mappings":";;;;;;AACA;;;;AACA;;;;;;AAEA,OAAO,SAAP,CAAiB,UAAjB,GAA8B,YAAW;AACrC,WAAO,KAAK,MAAL,CAAY,CAAZ,EAAe,WAAf,KAA+B,KAAK,KAAL,CAAW,CAAX,CAAtC;AACH,CAFD;;AAIA,IAAI,sBAAJ;;AAEA,gBAAgB,EAAhB;;;;;;;;;;;AAWA,cAAc,WAAd,GAA4B,UAAC,OAAD,EAAa;AACrC,QAAI,eAAJ;;AAEA,aAAS,EAAT;;AAEA,yBAAW,OAAX,CAAmB,UAAC,SAAD,EAAe;AAC9B,YAAI,oBAAJ;;AAEA,sBAAc,OAAO,UAAU,UAAV,EAArB;;AAEA,eAAO,WAAP,IAAsB,UAAC,KAAD,EAAW;AAC7B,oBAAQ,OAAR,CAAgB,SAAhB,EAA2B,KAA3B;AACH,SAFD;AAGH,KARD;;AAUA,WAAO,MAAP;AACH,CAhBD;;;;;;;;;AAyBA,cAAc,eAAd,GAAgC,UAAC,cAAD,EAAoB;AAChD,QAAI,kBAAJ;;AAEA,gBAAY,EAAZ;;AAEA,4BAAc,OAAd,CAAsB,UAAC,YAAD,EAAkB;AACpC,kBAAU,YAAV,IAA0B,YAAa;AAAA,8CAAT,IAAS;AAAT,oBAAS;AAAA;;AACnC,mBAAO,eACF,IADE,CACG,UAAC,MAAD,EAAY;AACd,uBAAO,OAAO,YAAP,gBAAwB,IAAxB,CAAP;AACH,aAHE,CAAP;AAIH,SALD;AAMH,KAPD;;AASA,WAAO,SAAP;AACH,CAfD;;kBAiBe,a","file":"YouTubePlayer.js","sourcesContent":["import _ from 'lodash';\nimport functionNames from './functionNames';\nimport eventNames from './eventNames';\n\nString.prototype.upperFirst = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nlet YouTubePlayer;\n\nYouTubePlayer = {};\n\n/**\n * Construct an object that defines an event handler for all of the YouTube\n * player events. Proxy captured events through an event emitter.\n *\n * @todo Capture event parameters.\n * @see https://developers.google.com/youtube/iframe_api_reference#Events\n * @param {Sister} emitter\n * @returns {Object}\n */\nYouTubePlayer.proxyEvents = (emitter) => {\n    let events;\n\n    events = {};\n\n    eventNames.forEach((eventName) => {\n        let onEventName;\n\n        onEventName = 'on' + eventName.upperFirst();\n\n        events[onEventName] = (event) => {\n            emitter.trigger(eventName, event);\n        };\n    });\n\n    return events;\n};\n\n/**\n * Delays player API method execution until player state is ready.\n *\n * @todo Proxy all of the methods using Object.keys.\n * @param {Promise} playerAPIReady Promise that resolves when player is ready.\n * @returns {Object}\n */\nYouTubePlayer.promisifyPlayer = (playerAPIReady) => {\n    let functions;\n\n    functions = {};\n\n    functionNames.forEach((functionName) => {\n        functions[functionName] = (...args) => {\n            return playerAPIReady\n                .then((player) => {\n                    return player[functionName](...args);\n                });\n        };\n    });\n\n    return functions;\n};\n\nexport default YouTubePlayer;\n"]}